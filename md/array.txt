---  改变原数组 ---

push: 数组尾部增加数据，改变原数组，返回值为添加的数据值(数据类型是你添加的数据的类型)
pop:数组尾部删除数据,改变原数组，返回值为删除的数据值(数据类型是你删除的数据的类型)

shift:数组头部删除数据,改变原数组，返回值为删除的数据值(数据类型是你删除的数据的类型)
unshift: 数组头部增加数据，改变原数组，返回值为添加的数据值(数据类型是你添加的数据的类型)

splice方法使用：(改变原数组,返回值为删除的元素组成的数组)
 1.传递一个参数,禁止性删除操作,参数值指定删除元素的起始下标(包含该下标元素)，将删除该下标后面所有，若第一个参数为负值,则按照绝对值从数组右侧开始向左侧定位,作为起始下标。
 2.若指定两个参数，第二个参数指要删除元素的个数
 3.如果指定三个或多个参数,则第三个以及后面所有参数都会被视为插入的元素(从第一个参数的下标元素前面添加)


reverse方法的使用: (改变原数组)
 1.就是很单纯的将数组进行翻转。不创建新数组。

sort方法的使用 : (改变原数组)
 1.若没有传递参数,则按照字母顺序对数组中的元素进行排序。
  eg:
     let arr = [1,2,3,4,22,34,32,34,100];
     console.log(arr.sort());
    arr为：[1, 100, 2, 22, 3, 32, 34, 34, 4]

 2.若有一个函数参数，这个函数要比较两个值(即函数的两个参数，第一个参数为后面的值，第二个参数是前面的值)，函数中返回正数，则两个值不交换位置,否则交换。


---- 不改变原数组 -----

concat方法的使用: (不改变原数组，返回值为添加后数据新的数组)
 1. 可以把传递的所有参数按顺序添加到数组的尾部。
 2.若参数是数组,则concat方法会把它打散,分别作为单独元素连接到数组的尾部,但是仅能够打散一维数组。

slice方法的使用 : （不改变原数组,返回值是截取的元素组成的数组）
 1. 第一个参数,指定截取元素的起始下标（包含当前元素）
 2.第二个参数，指定结束位置的下标(不包含结束位置的元素)
 3.若参数为负值,表示按照从右到左的顺序进行定位,但取值还是从左到右。

join方法的使用 : (不改变原数组,返回是字符串)
 1.可以把数组转换为字符串,可以指定分隔符，默认使用逗号分隔。
 2.遇到null或者undefined 直接转换成空字符串

indexOf方法的使用：(返回的是指定元素的索引位置)
 1. indexof返回某个元素值在数组中的第1个匹配项的索引,如果没有找到指定的值,则返回-1.
 2.第二个参数可选，表示开始搜索的数组索引。如果省略，则从索引0处开始搜索

lastIndexOf方法的使用: (返回的是数组中的最后一个匹配项的索引)，用法与indexOf相同

检测数组:Array.isArray()返回布尔值

map方法的使用 : (不改变原数组,返回新的数组)
 1.第一个参数是一个函数function(item,index,arr)(),也可以是系统的内置函数。

filter方法的使用 : (不改变原数组,返回满足条件的新数组)

reduce方法的使用 : (不改变原数组,返回值为最后一次的累计结果)


 



























